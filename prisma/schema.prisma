generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model community {
  id                               Int                 @id @default(autoincrement())
  name                             String              @db.VarChar(100)
  code                             Int                 @unique(map: "community_un")
  fk_admin_id                      Int
  user_community_fk_admin_idTouser user                @relation("community_fk_admin_idTouser", fields: [fk_admin_id], references: [id], onUpdate: Restrict, map: "community_FK")
  debt                             debt[]
  request                          request[]
  routine                          routine[]
  shoppinglist_item                shoppinglist_item[]
  task                             task[]
  user                             user[]
  users                            user[]              @relation("communityUser")

  @@index([fk_admin_id], map: "community_FK")
}

model user {
  id                                    Int            @id @default(autoincrement())
  fk_community_id                       Int?
  email                                 String         @unique(map: "user_email_un") @db.VarChar(100)
  verificationcode                      String?        @unique(map: "user_un") @db.VarChar(90)
  verified                              Boolean        @default(false)
  password                              String         @db.VarChar(100)
  creationdate                          DateTime       @default(dbgenerated("(curdate())")) @db.Date
  profile_image                         String?        @default("https://i.imgur.com/pWHgnHA.jpg") @db.VarChar(200)
  firstname                             String         @db.VarChar(100)
  lastname                              String         @db.VarChar(100)
  color                                 String         @default("#2e3039") @db.VarChar(7)
  community                             community?     @relation(fields: [fk_community_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "user_FK")
  community_community_fk_admin_idTouser community[]    @relation("community_fk_admin_idTouser")
  debt_debt_fk_user_creditor_idTouser   debt[]         @relation("debt_fk_user_creditor_idTouser")
  debt                                  debt[]         @relation("debt_fk_user_debitor_idTouser")
  request                               request[]
  routine_user                          routine_user[]
  task_user                             task_user[]
  communities                           community[]    @relation("communityUser")
  @@index([fk_community_id], map: "user_FK")
}

model request {
  date            DateTime  @default(dbgenerated("(curdate())")) @db.DateTime(0)
  fk_user_id      Int
  fk_community_id Int
  id              Int       @id @default(autoincrement())
  user            user      @relation(fields: [fk_user_id], references: [id], onUpdate: Restrict, map: "requests_FK")
  community       community @relation(fields: [fk_community_id], references: [id], onUpdate: Restrict, map: "requests_FK_1")

  @@index([fk_user_id], map: "requests_FK")
  @@index([fk_community_id], map: "requests_FK_1")
}

model task {
  id              Int         @id @default(autoincrement())
  name            String      @db.VarChar(100)
  notes           String?     @db.Text
  date            DateTime    @db.Date
  done            Boolean     @default(false)
  fk_community_id Int
  fk_routine_id   Int?
  routine         routine?    @relation(fields: [fk_routine_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "task_FK")
  community       community   @relation(fields: [fk_community_id], references: [id], onUpdate: Restrict, map: "tasks_FK_2")
  task_user       task_user[]

  @@index([fk_community_id], map: "tasks_FK_2")
  @@index([fk_routine_id], map: "task_FK")
}

model task_user {
  id         Int  @id @default(autoincrement())
  fk_user_id Int
  fk_task_id Int
  task       task @relation(fields: [fk_task_id], references: [id], onUpdate: Restrict, map: "task_user_FK")
  user       user @relation(fields: [fk_user_id], references: [id], onUpdate: Restrict, map: "task_user_FK_1")

  @@index([fk_task_id], map: "task_user_FK")
  @@index([fk_user_id], map: "task_user_FK_1")
}

model routine {
  id              Int            @id @default(autoincrement())
  startDate       DateTime       @db.Date
  interval        Int
  name            String         @db.VarChar(100)
  fk_community_id Int
  active          Boolean        @default(true)
  community       community      @relation(fields: [fk_community_id], references: [id], onUpdate: Restrict, map: "routine_FK")
  routine_user    routine_user[]
  task            task[]

  @@index([fk_community_id], map: "routine_FK")
}

model routine_user {
  id            Int     @id @default(autoincrement())
  fk_user_id    Int
  fk_routine_id Int
  routine       routine @relation(fields: [fk_routine_id], references: [id], onUpdate: Restrict, map: "routine_user_FK")
  user          user    @relation(fields: [fk_user_id], references: [id], onUpdate: Restrict, map: "routine_user_FK_1")

  @@index([fk_routine_id], map: "routine_user_FK")
  @@index([fk_user_id], map: "routine_user_FK_1")
}

model shoppinglist_item {
  id              Int       @id @default(autoincrement())
  fk_community_id Int
  name            String    @db.VarChar(100)
  done            Boolean   @default(false)
  done_date       DateTime? @db.Date
  community       community @relation(fields: [fk_community_id], references: [id], onUpdate: Restrict, map: "shoppinglist_item_FK")

  @@index([fk_community_id], map: "shoppinglist_item_FK")
}

model debt {
  id                                  Int       @id @default(autoincrement())
  fk_community_id                     Int
  fk_user_creditor_id                 Int
  fk_user_debitor_id                  Int
  amount                              Decimal   @db.Decimal(10, 2)
  name                                String    @db.VarChar(100)
  timestamp                           DateTime  @default(dbgenerated("(curdate())")) @db.DateTime(0)
  community                           community @relation(fields: [fk_community_id], references: [id], onUpdate: Restrict, map: "debt_FK")
  user_debt_fk_user_creditor_idTouser user      @relation("debt_fk_user_creditor_idTouser", fields: [fk_user_creditor_id], references: [id], onUpdate: Restrict, map: "debt_FK_1")
  user                                user      @relation("debt_fk_user_debitor_idTouser", fields: [fk_user_debitor_id], references: [id], onUpdate: Restrict, map: "debt_FK_2")

  @@index([fk_community_id], map: "debt_FK")
  @@index([fk_user_creditor_id], map: "debt_FK_1")
  @@index([fk_user_debitor_id], map: "debt_FK_2")
}

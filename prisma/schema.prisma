generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model community {
  id                               Int       @id @default(autoincrement())
  name                             String    @db.VarChar(100)
  code                             String    @unique(map: "community_un") @db.VarChar(100)
  fk_admin_id                      Int
  user_community_fk_admin_idTouser user      @relation("community_fk_admin_idTouser", fields: [fk_admin_id], references: [id], onUpdate: Restrict, map: "community_FK")
  request                          request[]
  tasks                            tasks[]
  user                             user[]

  @@index([fk_admin_id], map: "community_FK")
}

model tasks {
  id                              Int       @id @default(autoincrement())
  name                            String    @db.VarChar(100)
  description                     String?   @db.Text
  date                            DateTime  @db.DateTime(0)
  done                            Boolean   @default(false)
  fk_creator_id                   Int
  fk_assigned_id                  Int?
  fk_community_id                 Int
  user_tasks_fk_creator_idTouser  user      @relation("tasks_fk_creator_idTouser", fields: [fk_creator_id], references: [id], onUpdate: Restrict, map: "tasks_FK")
  user_tasks_fk_assigned_idTouser user?     @relation("tasks_fk_assigned_idTouser", fields: [fk_assigned_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "tasks_FK_1")
  community                       community @relation(fields: [fk_community_id], references: [id], onUpdate: Restrict, map: "tasks_FK_2")

  @@index([fk_creator_id], map: "tasks_FK")
  @@index([fk_assigned_id], map: "tasks_FK_1")
  @@index([fk_community_id], map: "tasks_FK_2")
}

model user {
  id                                    Int         @id @default(autoincrement())
  fk_community_id                       Int?
  email                                 String      @unique(map: "user_email_un") @db.VarChar(100)
  verificationcode                      String?     @unique(map: "user_un") @db.VarChar(90)
  verified                              Boolean     @default(false)
  password                              String      @db.VarChar(100)
  creationdate                          DateTime    @default(dbgenerated("(curdate())")) @db.Date
  profile_image                         String?     @db.VarChar(200)
  firstname                             String      @db.VarChar(100)
  lastname                              String      @db.VarChar(100)
  community                             community?  @relation(fields: [fk_community_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "user_FK")
  community_community_fk_admin_idTouser community[] @relation("community_fk_admin_idTouser")
  request                               request[]
  tasks_tasks_fk_creator_idTouser       tasks[]     @relation("tasks_fk_creator_idTouser")
  tasks_tasks_fk_assigned_idTouser      tasks[]     @relation("tasks_fk_assigned_idTouser")

  @@index([fk_community_id], map: "user_FK")
}

model request {
  date            DateTime  @default(dbgenerated("(curdate())")) @db.DateTime(0)
  fk_user_id      Int
  fk_community_id Int
  id              Int       @id @default(autoincrement())
  user            user      @relation(fields: [fk_user_id], references: [id], onUpdate: Restrict, map: "requests_FK")
  community       community @relation(fields: [fk_community_id], references: [id], onUpdate: Restrict, map: "requests_FK_1")

  @@index([fk_user_id], map: "requests_FK")
  @@index([fk_community_id], map: "requests_FK_1")
}
